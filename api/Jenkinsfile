pipeline {
  agent any

  environment {
    PROJECT_ID    = credentials('gcp-project-id') // Secret text
    REGION        = 'us-east1'
    REPO_NAME     = 'apps'
    SERVICE_NAME  = 'fastapi-demo'
    REGISTRY_HOST = "us-east1-docker.pkg.dev"     // host del Artifact Registry (ajusta si cambias región)
  }

  options {
    timestamps()
    ansiColor('xterm')
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
        sh 'git rev-parse --abbrev-ref HEAD && git log -1 --oneline || true'
      }
    }

    stage('GCloud Auth') {
      steps {
        withCredentials([file(credentialsId: 'gcp-sa-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
          sh '''
            set -e
            gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
            gcloud config set project "$PROJECT_ID"
            gcloud --quiet auth configure-docker "$REGISTRY_HOST"
          '''
        }
      }
    }

    stage('Build & Push Image') {
      steps {
        dir('api') {
          script {
            def COMMIT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
            env.IMAGE        = "$REGION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$SERVICE_NAME:$COMMIT"
            env.IMAGE_LATEST = "$REGION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$SERVICE_NAME:latest"
          }
          sh '''
            set -e
            # Construir con dos tags
            docker build -t "$IMAGE" -t "$IMAGE_LATEST" .
            # Push de ambas etiquetas
            docker push "$IMAGE"
            docker push "$IMAGE_LATEST"
          '''
        }
      }
    }

    stage('Deploy to Cloud Run') {
      steps {
        sh '''
          set -e
          # Despliegue (sin comentarios al final de líneas con '\')
          gcloud run deploy "$SERVICE_NAME" \
            --image "$IMAGE" \
            --platform managed \
            --region "$REGION" \
            --allow-unauthenticated \
            --port 8000
        '''
      }
    }

    stage('Smoke Test') {
      steps {
        script {
          def URL = sh(
            returnStdout: true,
            script: "gcloud run services describe \"$SERVICE_NAME\" --region \"$REGION\" --format='value(status.url)'"
          ).trim()
          echo "Service URL: ${URL}"
          sh """
            set -e
            # pequeño delay para arranque en frío
            sleep 5
            # prueba de salud con reintentos
            curl -fsSL --retry 5 --retry-delay 2 "${URL}/healthz" > /dev/null
          """
        }
      }
    }
  }

  post {
    success {
      script {
        def url = sh(
          returnStdout: true,
          script: "gcloud run services describe \"$SERVICE_NAME\" --region \"$REGION\" --format='value(status.url)'"
        ).trim()
        echo "✅ Despliegue exitoso: ${url}"
      }
    }
    failure {
      echo "❌ Pipeline falló. Revisa logs."
    }
  }
}
